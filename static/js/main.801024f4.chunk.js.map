{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","checkIsValid","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","isInvalidEmail","Boolean","match","htmlFor","type","classNames","event","onBlur","NewMovie","onAdd","count","setCount","checkEmail","setCheckEmail","submitData","setSubmitData","onFormDataChange","target","onSubmit","preventDefault","disabled","loadedMovies","moviesFromServer","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.801024f4.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string;\n  value: string;\n  label?: string;\n  placeholder?: string;\n  required?: boolean;\n  onChange?: (newValue: React.ChangeEvent<HTMLInputElement>) => void;\n  checkIsValid?: (isValid: boolean) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random().toFixed(16).slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value = '',\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  checkIsValid = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  /* eslint-disable */\n  const pattern =\n    /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n  const isInvalidEmail = Boolean(\n    (name === \"imdbUrl\" || name === \"imgUrl\") && value && !value.match(pattern)\n  );\n  /* eslint-enable */\n\n  const validateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (name === 'imdbUrl' || name === 'imgUrl') {\n      checkIsValid(isInvalidEmail);\n    } else {\n      checkIsValid(false);\n    }\n\n    onChange(event);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || isInvalidEmail,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={validateChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && <p className=\"help is-danger\">{`${label} is required`}</p>}\n\n      {isInvalidEmail && <p className=\"help is-danger\">Email is invalid</p>}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [checkEmail, setCheckEmail] = useState(true);\n  const [submitData, setSubmitData] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const onFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (\n      !submitData?.title\n      || !submitData?.imgUrl\n      || !submitData?.imdbUrl\n      || !submitData.imdbId\n      || checkEmail\n    ) {\n      return;\n    }\n\n    onAdd(submitData);\n    setCount(count + 1);\n  };\n\n  const onFormDataChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSubmitData({ ...submitData, [event.target.name]: event.target.value });\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={onFormSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={submitData.title}\n        onChange={onFormDataChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={submitData.description}\n        onChange={onFormDataChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={submitData.imgUrl}\n        onChange={onFormDataChange}\n        required\n        checkIsValid={setCheckEmail}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={submitData.imdbUrl}\n        onChange={onFormDataChange}\n        required\n        checkIsValid={setCheckEmail}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={submitData.imdbId}\n        onChange={onFormDataChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={\n              !submitData?.title\n              || !submitData?.imgUrl\n              || !submitData?.imdbUrl\n              || !submitData.imdbId\n              || checkEmail\n            }\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nconst loadedMovies = [...moviesFromServer];\n\nexport const App = () => {\n  const [movies, setMovies] = useState(loadedMovies);\n\n  const addNewMovieHandler = (movie:Movie) => {\n    setMovies([...loadedMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovieHandler} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}